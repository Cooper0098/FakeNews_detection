# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'show_0704.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import subprocess
import sys


class LoadingWindow(QtWidgets.QWidget):
    def __init__(self, duration, callback):
        super(LoadingWindow, self).__init__()
        self.setWindowTitle("加载中")
        self.resize(500, 150)
        layout = QtWidgets.QVBoxLayout(self)
        self.label = QtWidgets.QLabel("正在加载已训练模型，请稍候...", self)
        layout.addWidget(self.label)
        self.progress = QtWidgets.QProgressBar(self)
        self.progress.setMaximum(duration)
        self.progress.setValue(0)
        layout.addWidget(self.progress)
        self.duration = duration
        self.callback = callback
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_progress)
        self.timer.start(1000)
        self.elapsed = 0

    def update_progress(self):
        self.elapsed += 1
        self.progress.setValue(self.elapsed)
        if self.elapsed >= self.duration:
            self.timer.stop()
            self.callback()
            self.close()

from PyQt5 import QtWidgets, QtCore
import subprocess

class CustomDialog(QtWidgets.QDialog):
    def __init__(self, title, text, parent=None):
        super(CustomDialog, self).__init__(parent)
        self.setWindowTitle(title)
        self.setFixedSize(500, 150)  # 设置对话框大小
        layout = QtWidgets.QVBoxLayout(self)


        # self.label = QtWidgets.QLabel(text, self)
        # layout.addWidget(self.label)

        # 创建 QLabel 并设置文本和对齐方式
        self.label = QtWidgets.QLabel(self)
        self.label.setText(text)
        self.label.setAlignment(QtCore.Qt.AlignCenter)  # 居中对齐文本
        layout.addWidget(self.label)


        # self.ok_button = QtWidgets.QPushButton("OK", self)
        # self.ok_button.clicked.connect(self.accept)
        # layout.addWidget(self.ok_button)
        # 添加 OK 按钮
        self.ok_button = QtWidgets.QPushButton("OK", self)
        self.ok_button.setFixedWidth(75)  # 设置按钮宽度
        self.ok_button.clicked.connect(self.accept)
        layout.addWidget(self.ok_button, alignment=QtCore.Qt.AlignCenter)  # 居中对齐按钮


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(920, 897)
        MainWindow.setStyleSheet(
            "background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 147, 233, 255), stop:1 rgba(128, 208, 199, 255));")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_19 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_19.setGeometry(QtCore.QRect(620, 30, 251, 81))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        font.setBold(True)
        self.pushButton_19.setFont(font)
        self.pushButton_19.setStyleSheet("QPushButton {\n"
                                         "    color: white;\n"
                                         "    background-color: rgb(255, 182, 193);\n"
                                         "    border-radius: 10px; /* 设置边角半径为10像素，可以根据需要调整 */\n"
                                         "    border: 1px solid rgba(0, 0, 0, 0.2); /* 细微的边框 */\n"
                                         "    padding: 5px; /* 设置内边距，增强立体感 */\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover {\n"
                                         "    background-color: rgb(70, 110, 160); /* 设置悬停时的背景颜色 */\n"
                                         "    border: 1px solid rgba(0, 0, 0, 0.3); /* 细微的悬停时边框 */\n"
                                         "    color: lightgray; /* 设置悬停时的文字颜色 */\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:pressed {\n"
                                         "    background-color: rgb(50, 90, 130); /* 设置按下时的背景颜色 */\n"
                                         "    border: 1px solid rgba(0, 0, 0, 0.4); /* 细微的按下时边框 */\n"
                                         "    border: 2px solid rgb(30, 50, 80); /* 设置按下时的边框 */\n"
                                         "    color: lightgray; /* 设置按下时的文字颜色 */\n"
                                         "}\n"
                                         "")
        self.pushButton_19.setObjectName("pushButton_19")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 220, 851, 611))
        self.textEdit.setWhatsThis("")
        self.textEdit.setStyleSheet("\n"
                                    "background-color: rgb(30, 100, 162);color: white; border-radius: 10px;\n"
                                    "")
        self.textEdit.setTextInteractionFlags(
            QtCore.Qt.LinksAccessibleByMouse | QtCore.Qt.TextEditable | QtCore.Qt.TextEditorInteraction | QtCore.Qt.TextSelectableByKeyboard | QtCore.Qt.TextSelectableByMouse)
        self.textEdit.setObjectName("textEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 130, 851, 71))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setMouseTracking(True)
        self.label.setAcceptDrops(True)
        self.label.setStyleSheet("\n"
                                 "background-color: rgb(30, 100, 162);color: white; border-radius: 10px;\n"
                                 "")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 30, 581, 81))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(33)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setMouseTracking(True)
        self.label_2.setAcceptDrops(True)
        self.label_2.setStyleSheet("\n"
                                   "background-color: rgb(30, 100, 162);color: white; border-radius: 10px;\n"
                                   "")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 920, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_19.clicked.connect(self.on_pushButton_19_clicked)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        MainWindow.setWhatsThis(_translate("MainWindow", "请输入要检测的新闻内容"))
        self.pushButton_19.setText(_translate("MainWindow", "点击检测"))
        self.textEdit.setPlaceholderText(_translate("MainWindow", "请输入文本内容"))
        self.label.setText(_translate("MainWindow", "请输入要检测的新闻内容⬇️"))
        self.label_2.setText(_translate("MainWindow", "新闻文本虚假检测"))

    def on_pushButton_19_clicked(self):
        text = self.textEdit.toPlainText()
        if not text:
            QtWidgets.QMessageBox.warning(None, "警告", "请输入内容")
            return


        # 显示加载窗口并在加载结束后调用预测函数
        self.loading_window = LoadingWindow(1, lambda: self.run_prediction(text))
        self.loading_window.show()

    # def run_prediction(self, text):
    #     result = subprocess.run(['python', 'predictText.py', text], capture_output=True, text=True, encoding='utf-8')
    #     if result.returncode == 0:
    #         output = result.stdout.strip()
    #         QtWidgets.QMessageBox.information(None, "检测结果", output)
    #     else:
    #         QtWidgets.QMessageBox.critical(None, "错误", "检测过程中发生错误")

    def run_prediction(self, text):
        result = subprocess.run(['python', 'predictText.py', text], capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            output = result.stdout.strip()
            self.custom_dialog = CustomDialog("检测结果", output)
            self.custom_dialog.exec_()
        else:
            self.error_dialog = CustomDialog("错误", "检测过程中发生错误")
            self.error_dialog.exec_()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
